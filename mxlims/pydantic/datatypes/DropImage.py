# generated by datamodel-codegen:
#   filename:  datatypes/DropImage.json
#   timestamp: 2025-03-23T15:25:48+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional, Union

from pydantic import AnyUrl, BaseModel, Field, RootModel

from . import ImageLightType, ImageMimeType


class Dropimage1(BaseModel):
    """
    An image of a crystallization drop.
    """

    mime_type: ImageMimeType.ImageMimetype = Field(
        ..., alias="mimeType", description="The MIME type of the image."
    )
    light_type: Optional[ImageLightType] = Field(
        None, alias="lightType", description="The light used to capture the image."
    )
    timestamp: Optional[datetime] = Field(
        None,
        description="The date and time when the image was captured. This is to be specified in UTC and conform to ISO 8601.",
        examples=["2024-04-24T14:30:16Z", "20240424T143016Z"],
    )
    url: AnyUrl = Field(
        ...,
        description="A URL where the image can be found. It is assumed that no further authentication is needed to read this image.",
    )
    path: Optional[str] = Field(
        None,
        description="A filesystem path where the image can be found. It is assumed that both sender and receiver have permission to read the image.",
    )
    data: Optional[str] = Field(None, description="The image, UUencoded.")


class Dropimage2(BaseModel):
    """
    An image of a crystallization drop.
    """

    mime_type: ImageMimeType.ImageMimetype = Field(
        ..., alias="mimeType", description="The MIME type of the image."
    )
    light_type: Optional[ImageLightType] = Field(
        None, alias="lightType", description="The light used to capture the image."
    )
    timestamp: Optional[datetime] = Field(
        None,
        description="The date and time when the image was captured. This is to be specified in UTC and conform to ISO 8601.",
        examples=["2024-04-24T14:30:16Z", "20240424T143016Z"],
    )
    url: Optional[AnyUrl] = Field(
        None,
        description="A URL where the image can be found. It is assumed that no further authentication is needed to read this image.",
    )
    path: str = Field(
        ...,
        description="A filesystem path where the image can be found. It is assumed that both sender and receiver have permission to read the image.",
    )
    data: Optional[str] = Field(None, description="The image, UUencoded.")


class Dropimage3(BaseModel):
    """
    An image of a crystallization drop.
    """

    mime_type: ImageMimeType.ImageMimetype = Field(
        ..., alias="mimeType", description="The MIME type of the image."
    )
    light_type: Optional[ImageLightType] = Field(
        None, alias="lightType", description="The light used to capture the image."
    )
    timestamp: Optional[datetime] = Field(
        None,
        description="The date and time when the image was captured. This is to be specified in UTC and conform to ISO 8601.",
        examples=["2024-04-24T14:30:16Z", "20240424T143016Z"],
    )
    url: Optional[AnyUrl] = Field(
        None,
        description="A URL where the image can be found. It is assumed that no further authentication is needed to read this image.",
    )
    path: Optional[str] = Field(
        None,
        description="A filesystem path where the image can be found. It is assumed that both sender and receiver have permission to read the image.",
    )
    data: str = Field(..., description="The image, UUencoded.")


class Dropimage(RootModel[Union[Dropimage1, Dropimage2, Dropimage3]]):
    root: Union[Dropimage1, Dropimage2, Dropimage3] = Field(
        ..., description="An image of a crystallization drop.", title="Dropimage"
    )
