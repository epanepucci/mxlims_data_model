# generated by datamodel-codegen:
#   filename:  datatypes/CrystalForm.json
#   timestamp: 2025-03-23T15:25:48+00:00

from __future__ import annotations

from typing import Optional, Union

from pydantic import BaseModel, Field, RootModel

from . import SpaceGroupName, UnitCell


class CrystalForm1(BaseModel):
    """
    Crystal form, fully or partially specified
    """

    unit_cell: Optional[UnitCell] = Field(
        None, alias="unitCell", description="Unit cell for Crystal form."
    )
    space_group_name: SpaceGroupName = Field(
        ...,
        alias="spaceGroupName",
        description="Name of expected space group, for processing. Names may include alternative settings. Matches mmCIF item symmetry.space_group_name_H-M (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_symmetry.space_group_name_H-M.html).",
        title="Space Group Name",
    )


class CrystalForm2(BaseModel):
    """
    Crystal form, fully or partially specified
    """

    unit_cell: UnitCell = Field(
        ..., alias="unitCell", description="Unit cell for Crystal form."
    )
    space_group_name: Optional[SpaceGroupName] = Field(
        None,
        alias="spaceGroupName",
        description="Name of expected space group, for processing. Names may include alternative settings. Matches mmCIF item symmetry.space_group_name_H-M (https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_symmetry.space_group_name_H-M.html).",
        title="Space Group Name",
    )


class CrystalForm(RootModel[Union[CrystalForm1, CrystalForm2]]):
    root: Union[CrystalForm1, CrystalForm2] = Field(
        ...,
        description="Crystal form, fully or partially specified",
        title="CrystalForm",
    )
